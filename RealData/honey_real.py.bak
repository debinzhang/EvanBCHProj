#!/usr/bin/python3

import json
import logging
import os
import re
import sys

def proc_file(path, name):
    #print("apar_stats_file:%s" % (os.path.join(path, name)))

    file = open(os.path.join(path, name), 'r')
    lines = file.readlines()
    headline = []
    datalines = []
    findHeadline = False

    for line in lines:
      if "#" in line:
        if "ColHeaders" in line:
          headline = line.split()
          findHeadline = True
        else:
          continue
      else:
        if not findHeadline:
          print("Failed to find headline!!!!")
          break
        else:
          datalines.append(line.split())
    # headline looks like:
    # # ColHeaders StructName NumVert SurfArea GrayVol ThickAvg ThickStd MeanCurv GausCurv FoldInd CurvInd
    # Remove "# ColHeaders StructName" 
    return headline[3:], datalines

def getStructNamesAndDatalist(datasetHeadline, patientInfo, headline, datalines):
  structNames = list(datasetHeadline)
  datalists = [[]] * len(headline)

  for statsCol in range(len(headline)):
    datalists[statsCol] = list(patientInfo)

  for row in range(len(datalines)):
    structNames.append(datalines[row][0])
    for statsColIndex in range(len(headline)):
      datalists[statsColIndex].append(datalines[row][statsColIndex+1])

  return structNames, datalists

def mergeDatalist(datalists):
  # merge datalist, like [[1.0, 2.0,3.0], [5.0, 6.0, 7.0]]
  # into [1.0, 2.0, 3.0, 4.0, 5.0, 6.0]
  mergedDatalist = []
  for datalist in datalists:
    mergedDatalist += datalist

  return mergedDatalist

def proc_dataset_file(path, filename):
  subjIdlist = []
  datasetlist = []

  file = open(os.path.join(path, filename), 'r')
  lines = file.readlines()

  # read the headline
  headline = lines[0].split(",")
  headline = headline[2:5] + headline[8:10]

  for line in lines[1:]:
    lineList = line.split(',')
    # usefulData are subjectID, Age, Sex, Scanner-type, magnetic field strength
    usefulData = lineList[2:5] + lineList[8:10]
    subjIdItem = line.split(',')[2]
    # in case the subjId take the format like ear0-1_Q1/4574636. In this case 4574636 is the ID
    if '/' in subjIdItem:
      subjIdItem = subjIdItem.split('/',1)[1]
    subjIdlist.append(subjIdItem)
    datasetlist.append(usefulData)

  return headline, subjIdlist, datasetlist


def main(argv):
  root_dir = '.'
  if len(argv) > 0:
    root_dir = argv[0]

  firstFile = True
  firstFileheadline = []
  firstFileStructNames = []
  finalMegeredDataDic = {}

  datasetHeadline, subjectIdlist, datasetlist = proc_dataset_file(".", "Dataset.csv")
  print("datasetHeadline: ")
  print(datasetHeadline)

  for path, subdirs, files in os.walk(root_dir):
    for name in files:
      if "lh.aparc.stats" in name and name.endswith(".stats"):
        print("file name_1: %s/%s" %  (path, name))

        # find the directory name that contains subjectId, which is right before the stats dir
        # like: /IXI21009-Guys-0894-T1/stats/
        try:
          dirlist = path.split('/')
          subjIdDirName = dirlist[dirlist.index('stats')-1]
        except ValueError:
          print("Cannot find the directory name  that contains subjId before stats dir")
          continue

        print("subjIdDirName %s" % subjIdDirName)

        # get subjId from stats file path
        try:
          #subjId = 'unknown'
          if "deface" in path: #if path start with "deface", the path format is deface_subjId_xxx_yyy
            pathlist = subjIdDirName.split('_')
            subjId = pathlist[1]
          elif '-' in path: # for that rest path, it is formated either like subjid-xxx-yyy or subjid_xxx_yyy
            pathlist = re.split('-|_', subjIdDirName)
            subjId = pathlist[0]
          else:
            print("Failed to find subjId for path: %" % path)
        except ValueError:
          print("cannot find subject ID from subjIdDirName: %s" % subjIdDirName)
          continue

        print("Got subjId: %s" % subjId)

        # find the index from subjectIdlist that contains subjectId
        try:
          subjIdIndex = subjectIdlist.index(subjId)
          patientInfo = datasetlist[subjIdIndex]
        except ValueError:
          print("cannot find subject ID index for subjId: %s" % subjId)
          continue  

        print("subjIdIndex: %d" % subjIdIndex)
        print("patientInfo: ")
        print(patientInfo)

        statsHeadline, datalines = proc_file(path, name)
        structNames, datalists = getStructNamesAndDatalist(datasetHeadline, patientInfo, statsHeadline, datalines)
        if firstFile:
          print("1.........")
          print(structNames)
          print("2.........")
          print(datalists)

          firstFileheadline = list(statsHeadline)
          firstFileStructNames = list(structNames)
          finalMegeredDatalist = list(datalists)
          # res = {test_keys[i]: test_values[i] for i in range(len(test_keys))}

          finalMegeredDataDic = {firstFileheadline[i]: [list(datalists[i])] for i in range(len(statsHeadline))}
          firstFile = False
          print("firstFile: %s  Headline:" % os.path.join(path, name))
          print(*statsHeadline, sep=", ")
          print("")
          print("firstFile structNames:")
          print(*structNames, sep=", ")
          print("total row number: %d " % len(structNames))
          print("")
          print(*datalists, sep=", ")
          print("----------------------------------------------------")
        else:
          print("2nd file")
          print("statsHeadline:")
          print(statsHeadline)
          print("structNames")
          print(structNames)
          print("***********")
          print("firstFileStructNames")
          print(firstFileStructNames)
          print("$$$")
          if not firstFileheadline == statsHeadline:
            print("%s headline is not equal" % os.path.join(path, name))
            continue
          if not firstFileStructNames == structNames:
            print("%s structName is not equal" % os.path.join(path, name))
            continue

          for i in range(len(firstFileheadline)):
            finalMegeredDataDic[firstFileheadline[i]].append(list(datalists[i]))

  print("Going to output files")
  print(finalMegeredDataDic)
  for i in range(len(firstFileheadline)):
    with open(firstFileheadline[i]+'.csv', 'w') as f:
      for j in range(len(firstFileStructNames)):
        #print("Debin: %d" % len(finalMegeredDataDic[firstFileheadline[i]]))
        rowlist = [firstFileStructNames[j]]
        for k in range(len(finalMegeredDataDic[firstFileheadline[i]])):
          rowlist.append(finalMegeredDataDic[firstFileheadline[i]][k][j])
        f.write("%s\n" %(','.join(rowlist)))

if __name__ == '__main__':
  main(sys.argv[1:])